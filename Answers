Problem 15 : Chemical Synthesis

import java.io.*;
import java.util.*;
 
public class Main {
    public static int solve(int[] ID, int N, int M) {
        int ans = Integer.MIN_VALUE;
        Map<Integer, Integer> mp = new HashMap<>();
  
        // Initialize the first sliding window
        for (int i = 0; i < M; i++) {
            mp.put(ID[i], mp.getOrDefault(ID[i], 0) + 1);
        }
  
        // Compute the maximum frequency (including neighbors)
        for (int key : mp.keySet()) {
            int count = mp.getOrDefault(key, 0)
                      + mp.getOrDefault(key - 1, 0)
                      + mp.getOrDefault(key + 1, 0);
            ans = Math.max(ans, count);
        }
  
        // Slide the window
        for (int i = M; i < N; i++) {
            // Remove the leftmost element of the window
            int left = ID[i - M];
            mp.put(left, mp.get(left) - 1);
            if (mp.get(left) == 0) mp.remove(left);
  
            // Add the new element to the window
            int curr = ID[i];
            mp.put(curr, mp.getOrDefault(curr, 0) + 1);
  
            // Compute the maximum frequency dynamically
            for (int key : Arrays.asList(curr, curr - 1, curr + 1)) {
                int count = mp.getOrDefault(key, 0)
                          + mp.getOrDefault(key - 1, 0)
                          + mp.getOrDefault(key + 1, 0);
                ans = Math.max(ans, count);
            }
        }
  
        return ans;
    }
  
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
  
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] ID = new int[N];
  
        for (int i = 0; i < N; i++) {
            ID[i] = sc.nextInt();
        }
  
        System.out.println(solve(ID, N, M)); // Output the result
    }
}


Problem 14 : Dividing an Area

import java.util.*;

public class Main {

    // Function to calculate the new position based on the move
    private static int[] calculateNewPosition(int[] point, int move, int[][] moves) {
        return new int[]{point[0] + moves[move][0], point[1] + moves[move][1]};
    }

    // Function to convert a position (x, y) into a string "x,y"
    private static String positionToString(int x, int y) {
        return x + "," + y;
    }

    public static int countNewConnections(int N, String info) {
        // Initialize movement rules for each direction
        int[][] moves = {
            {1, 0},  // Move down
            {-1, 0}, // Move up
            {0, -1}, // Move left
            {0, 1}   // Move right
        };

        // Map to store connections between positions
        Map<String, Set<String>> dp = new HashMap<>();
        dp.put("0,0", new HashSet<>()); // Start at origin

        // Starting point and count of new connections
        int[] point = {0, 0};
        int count = 0;

        // Iterate through each move in the input
        for (int i = 0; i < N; i++) {
            char moveChar = info.charAt(i);
            int move = moveChar - '0'; // Convert character to integer

            // Calculate the new position
            int[] newPosArray = calculateNewPosition(point, move, moves);
            String newPos = positionToString(newPosArray[0], newPosArray[1]);
            String currentPos = positionToString(point[0], point[1]);

            // If the new position is not in the map, create an entry
            if (!dp.containsKey(newPos)) {
                dp.put(newPos, new HashSet<>());
                dp.get(currentPos).add(newPos); // Mark connection
                dp.get(newPos).add(currentPos); // Mark connection in reverse
            } else {
                // If new position exists but not connected to the current position
                if (!dp.get(newPos).contains(currentPos)) {
                    count++; // Increment new connection count
                    dp.get(currentPos).add(newPos); // Mark connection
                    dp.get(newPos).add(currentPos); // Mark connection in reverse
                }
            }

            // Update the current position
            point = newPosArray;
        }

        return count; // Return the total count of new connections
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt(); // Number of moves
        String info = sc.next(); // Movement information
        sc.close();

        // Calculate and print the result
        System.out.println(countNewConnections(N, info));
    }
}


Problem 13 Counter clockwise Rotation:

void Rotate(int sr, int sc, int er, int ec) {
 
    // Base case: If the sub-matrix is a single element or empty, no rotation is needed
 
    if (sr >= er || sc >= ec) {
 
        return;
 
    }
  
    // Temporary variable to store the first element of the sub-matrix
 
    int temp = Mat[sr][sc];
  
    // Rotate the top row counter-clockwise
 
    for (int c = sc; c < ec; c++) {
 
        Mat[sr][c] = Mat[sr][c + 1];
 
    }
  
    // Rotate the right column counter-clockwise
 
    for (int r = sr; r < er; r++) {
 
        Mat[r][ec] = Mat[r + 1][ec];
 
    }
  
    // Rotate the bottom row counter-clockwise
 
    for (int c = ec; c > sc; c--) {
 
        Mat[er][c] = Mat[er][c - 1];
 
    }
  
    // Rotate the left column counter-clockwise
 
    for (int r = er; r > sr; r--) {
 
        Mat[r][sc] = Mat[r - 1][sc];
 
    }
  
    // Assign the stored first element to its new position
 
    Mat[sr + 1][sc] = temp;
 
}


Problem 12: Removal of foreign matter

import java.util.*;
 
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
         
        // Read input values
        int n = scanner.nextInt(); // Number of foreign matters
        int k = scanner.nextInt(); // Maximum number of uses of the adsorption equipment
         
        int[] positions = new int[n];
        for (int i = 0; i < n; i++) {
            positions[i] = scanner.nextInt();
        }
         
        // Sort the positions
        Arrays.sort(positions);
         
        // Perform binary search to find the minimum adsorption force V
        int left = 0;
        int right = positions[n - 1] - positions[0]; // Maximum possible range
        int result = right;
         
        while (left <= right) {
            int mid = (left + right) / 2;
            if (canCoverWithForce(positions, n, k, mid)) {
                result = mid; // Update result with smaller possible force
                right = mid - 1; // Try to find a smaller force
            } else {
                left = mid + 1; // Increase the force
            }
        }
         
        // Print the minimum adsorption force V
        System.out.println(result);
         
        scanner.close();
    }
     
    // Helper function to check if all foreign matters can be covered with given force V
    private static boolean canCoverWithForce(int[] positions, int n, int k, int force) {
        int uses = 0;
        int i = 0;
         
        while (i < n) {
            int range = positions[i] + 2 * force; // Calculate the range covered by this use
            uses++;
             
            if (uses > k) {
                return false; // Too many uses required
            }
             
            // Move to the next uncovered foreign matter
            while (i < n && positions[i] <= range) {
                i++;
            }
        }
         
        return true; // All foreign matters covered within K uses
    }
}

Problem 11: Math Galaxy

import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int start = sc.nextInt();
        int dest1 = sc.nextInt();
        int dest2 = sc.nextInt();

        System.out.println(findMinimumMoves(start, dest1));
        System.out.println(findMinimumMoves(start, dest2));
    }

    // Function to find the minimum moves using BFS
    public static int findMinimumMoves(int start, int destination) {
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.add(start);
        visited.add(start);

        int moves = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                int current = queue.poll();

                if (current == destination) {
                    return moves;
                }

                // Generate all valid neighbors
                for (int neighbor : generateNeighbors(current)) {
                    if (!visited.contains(neighbor) && isValidMove(current, neighbor)) {
                        queue.add(neighbor);
                        visited.add(neighbor);
                    }
                }
            }
            moves++;
        }
        return -1; // Should never reach here as per the problem statement
    }

    // Generate all 4-digit numbers differing by one digit
    public static List<Integer> generateNeighbors(int num) {
        List<Integer> neighbors = new ArrayList<>();
        char[] digits = String.valueOf(num).toCharArray();

        for (int i = 0; i < 4; i++) {
            char original = digits[i];

            for (char d = '0'; d <= '9'; d++) {
                if (d != original) {
                    digits[i] = d;
                    int neighbor = Integer.parseInt(new String(digits));
                    if (neighbor >= 1000 && neighbor <= 9999) {
                        neighbors.add(neighbor);
                    }
                }
            }
            digits[i] = original; // Restore original digit
        }

        return neighbors;
    }

    // Check if the move between two planets is valid
    public static boolean isValidMove(int num1, int num2) {
        return hasOneDigitDifference(num1, num2) && Math.abs(countFactors(num1) - countFactors(num2)) <= 1;
    }

    // Check if two numbers differ by exactly one digit
    public static boolean hasOneDigitDifference(int num1, int num2) {
        char[] digits1 = String.valueOf(num1).toCharArray();
        char[] digits2 = String.valueOf(num2).toCharArray();

        int diffCount = 0;
        for (int i = 0; i < 4; i++) {
            if (digits1[i] != digits2[i]) {
                diffCount++;
            }
        }
        return diffCount == 1;
    }

    // Count the number of factors of a number
    public static int countFactors(int n) {
        int count = 0;

        for (int i = 1; i * i <= n; i++) {
            if (n % i == 0) {
                count++;
                if (i != n / i) {
                    count++;
                }
            }
        }
        return count;
    }
}


Problem 10:  Finding hidden pictures

import java.util.Scanner;
 
public class Main {
    static int N; // Size of the grid
    static int[][] grid; // The grid
    static int X1, X2, X3; // The three numbers that form a hidden picture
 
    // Direction vectors for 8 directions (up, down, left, right, and diagonals)
    static int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
    static int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Input the size of the grid
        N = sc.nextInt();
        grid = new int[N][N];
 
        // Input the grid values
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                grid[i][j] = sc.nextInt();
            }
        }
 
        // Input the three numbers representing the hidden picture
        X1 = sc.nextInt();
        X2 = sc.nextInt();
        X3 = sc.nextInt();
 
        // Solve the problem
        int result = solve();
 
        // Output the result
        System.out.println(result);
 
        sc.close();
    }
 
    static int solve() {
        int count = 0;
 
        // Traverse each cell in the grid
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                // Check if the current cell is X1
                if (grid[i][j] == X1) {
                    // Check all 8 directions
                    for (int d = 0; d < 8; d++) {
                        int ni1 = i + dx[d]; // Next cell
                        int nj1 = j + dy[d];
                        int ni2 = i + 2 * dx[d]; // Cell after the next
                        int nj2 = j + 2 * dy[d];
 
                        // Check bounds and values
                        if (isValid(ni1, nj1) && isValid(ni2, nj2) &&
                            grid[ni1][nj1] == X2 && grid[ni2][nj2] == X3) {
                            count++;
                        }
                    }
                }
            }
        }
 
        return count;
    }
 
    static boolean isValid(int x, int y) {
        return x >= 0 && x < N && y >= 0 && y < N;
    }
}

Problem 09 : Collection of Parcels

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    static int n;
    static int[][] parcels;
    static int[] officeA, officeB;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input number of parcels
        n = sc.nextInt();

        // Input office coordinates
        officeA = new int[]{sc.nextInt(), sc.nextInt()};
        officeB = new int[]{sc.nextInt(), sc.nextInt()};

        // Input parcel coordinates
        parcels = new int[n][2];
        for (int i = 0; i < n; i++) {
            parcels[i][0] = sc.nextInt();
            parcels[i][1] = sc.nextInt();
        }

        int minFuel = Integer.MAX_VALUE;

        // Iterate through all subsets of parcels (2^n subsets)
        for (int mask = 0; mask < (1 << n); mask++) {
            // Generate subsets for A and B
            List<int[]> parcelsA = new ArrayList<>();
            List<int[]> parcelsB = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) != 0) {
                    parcelsA.add(parcels[i]);
                } else {
                    parcelsB.add(parcels[i]);
                }
            }

            // Calculate fuel for this distribution of parcels
            int fuelA = calculateMinFuel(officeA, parcelsA);
            int fuelB = calculateMinFuel(officeB, parcelsB);
            minFuel = Math.min(minFuel, fuelA + fuelB);
        }

        System.out.println(minFuel);
    }

    // Calculate the minimum fuel required to collect all parcels from a given office
    static int calculateMinFuel(int[] office, List<int[]> parcels) {
        if (parcels.isEmpty()) return 0;

        List<List<int[]>> permutations = generatePermutations(parcels);
        int minFuel = Integer.MAX_VALUE;

        for (List<int[]> order : permutations) {
            int fuel = 0;
            int[] currentLocation = office;
            int parcelsPicked = 0;

            // Calculate fuel for the current order of parcel collection
            for (int[] parcel : order) {
                fuel += distance(currentLocation, parcel) * (1 + parcelsPicked);
                parcelsPicked++;
                currentLocation = parcel;
            }

            // Return to the office
            fuel += distance(currentLocation, office) * (1 + parcelsPicked);

            minFuel = Math.min(minFuel, fuel);
        }

        return minFuel;
    }

    // Generate all permutations of a list of parcels
    static List<List<int[]>> generatePermutations(List<int[]> parcels) {
        List<List<int[]>> permutations = new ArrayList<>();
        permute(parcels, 0, permutations);
        return permutations;
    }

    static void permute(List<int[]> parcels, int start, List<List<int[]>> permutations) {
        if (start == parcels.size()) {
            permutations.add(new ArrayList<>(parcels));
            return;
        }
        for (int i = start; i < parcels.size(); i++) {
            swap(parcels, i, start);
            permute(parcels, start + 1, permutations);
            swap(parcels, i, start); // backtrack
        }
    }

    static void swap(List<int[]> parcels, int i, int j) {
        int[] temp = parcels.get(i);
        parcels.set(i, parcels.get(j));
        parcels.set(j, temp);
    }

    // Calculate Manhattan distance between two points
    static int distance(int[] a, int[] b) {
        return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);
    }
}

Problem 08 : Running

import java.util.Scanner;
 
public class Main {
    static int N; // Number of players
    static long T; // Time
    static long[] P = new long[100000 + 10]; // Initial positions of players
    static long[] S = new long[100000 + 10]; // Speeds of players
    static int[] group_first = new int[100000 + 10]; // Leader of each group
 
    public void InputData() {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt(); // Number of players
        T = sc.nextLong(); // Time
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextLong(); // Initial position
            S[i] = sc.nextLong(); // Speed
        }
        sc.close();
    }
 
    public static void main(String[] args) {
        int ans = 0; // Number of groups
        Main m = new Main();
        m.InputData(); // Input data
 
        // Sort players by their initial positions in descending order
        Integer[] indices = new Integer[N];
        for (int i = 0; i < N; i++) {
            indices[i] = i;
        }
        java.util.Arrays.sort(indices, (i, j) -> Long.compare(P[j], P[i]));
 
        // Simulate groups
        long lastPosition = Long.MAX_VALUE; // To track the leader's position
        for (int idx : indices) {
            // Calculate the position of the player at time T
            long currentPosition = P[idx] + S[idx] * T;
 
            // If the player cannot catch up to the previous group leader, form a new group
            if (currentPosition < lastPosition) {
                group_first[ans] = idx + 1; // Save leader (1-based index)
                ans++;
                lastPosition = currentPosition;
            }
        }
 
        // Output results
        System.out.println(ans); // Number of groups
        for (int i = 0; i < ans; i++) {
            System.out.print(group_first[i] + " ");
        }
    }
}

Problem 07 : Hopscotch

    int[] dr = {-1, 1, 0, 0, -1, -1, 1, 1};
    int[] dc = {0, 0, -1, 1, -1, 1, -1, 1};

    void Touch(int r, int c) {
        int V;
        if (A[r][c] == 0) V = 1;
        else V = 0;
        A[r][c] = V;

        for (int k = 0; k < 8; k++) {
            int nr = r;
            int nc = c;
            boolean bomb = false, match = false;

            while (true) {
                nr += dr[k];
                nc += dc[k];
                if (nr < 0 || nc < 0 || nr >= H || nc >= W) break;

                if (V == A[nr][nc]) {
                    match = true;
                    break;
                }

                if (A[nr][nc] == 2) {
                    bomb = true;
                    if (match) break;
                }
            }

            if (bomb && match) {
                nr = r;
                nc = c;
                while (true) {
                    nr += dr[k];
                    nc += dc[k];
                    if (nr < 0 || nr >= H || nc < 0 || nc >= W) break;
                    A[nr][nc] = V;
                }
            } else if (match) {
                int temp_r = nr, temp_c = nc;
                nr = r;
                nc = c;
                while (nr != temp_r || nc != temp_c) {
                    if (nr < temp_r) nr++;
                    else if (nr > temp_r) nr--;
                    if (nc < temp_c) nc++;
                    else if (nc > temp_c) nc--;
                    if (nr < 0 || nr >= H || nc < 0 || nc >= W) break;
                    if (A[nr][nc] != V) A[nr][nc] = V;
                }
            }
        }
    }

Problem 06 : Planet Travel 

import java.util.*;

public class Main {
	
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int []arr = new int[n];
		for(int i = 0; i < n; i++){
			arr[i] = sc.nextInt();
		}
		int ans = findPossibleCases(arr, n);
    System.out.println(ans);
	}

    // Optimized function to solve the problem
    public static int findPossibleCases(int []arr, int n) {
        // Arrays to store the previous and next greater elements
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left, -1);
        Arrays.fill(right, -1);

        // Calculate the previous greater element (PGE)
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] <= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = arr[stack.peek()];
            }
            stack.push(i);
        }

        // Clear the stack for calculating the next greater element (NGE)
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] <= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = arr[stack.peek()];
            }
            stack.push(i);
        }

        // Count the valid pairs (arr[i], left[i], right[i])
        Set<String> validPairs = new HashSet<>();
        for (int i = 0; i < n; i++) {
            if (arr[i] < left[i] && arr[i] < right[i]) {
                validPairs.add(arr[i] + "," + left[i] + "," + right[i]);
            }
        }

        // The answer is the size of the valid pairs set + n - 1 (as per the original logic)
        return validPairs.size() + n - 1;
    }

}

Problem 05: Creation of a Park

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
 
public class Main {
 
    public static Map<Character, Integer> countZones(char[][] grid) {
        int n = grid.length;
        Map<Character, Integer> zoneCounts = new HashMap<>();
        Set<String> visited = new HashSet<>();
 
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                char owner = grid[i][j];
                String cell = i + "," + j;
 
                if (!visited.contains(cell)) {
                    exploreZone(grid, i, j, owner, visited);
                    zoneCounts.put(owner, zoneCounts.getOrDefault(owner, 0) + 1);
                }
            }
        }
        return zoneCounts;
    }
 
    private static void exploreZone(char[][] grid, int row, int col, char owner, Set<String> visited) {
        int n = grid.length;
        if (row < 0 || row >= n || col < 0 || col >= n) {
            return;
        }
 
        String cell = row + "," + col;
        if (visited.contains(cell) || grid[row][col] != owner) {
            return;
        }
 
        visited.add(cell);
 
        // Explore adjacent cells (up, down, left, right)
        exploreZone(grid, row + 1, col, owner, visited);
        exploreZone(grid, row - 1, col, owner, visited);
        exploreZone(grid, row, col + 1, owner, visited);
        exploreZone(grid, row, col - 1, owner, visited);
    }
 
    public static Map<Character, Integer> countGrids(char[][] grid) {
        Map<Character, Integer> gridCounts = new HashMap<>();
        for (char[] row : grid) {
            for (char owner : row) {
                gridCounts.put(owner, gridCounts.getOrDefault(owner, 0) + 1);
            }
        }
        return gridCounts;
    }
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume newline
 
        char[][] grid = new char[n][n];
        for (int i = 0; i < n; i++) {
            String row = scanner.nextLine();
            for (int j = 0; j < n; j++) {
                grid[i][j] = row.charAt(j);
            }
        }
 
        Map<Character, Integer> zoneCounts = countZones(grid);
        Map<Character, Integer> gridCounts = countGrids(grid);
 
        char winner = ' ';
        int maxZones = -1;
        int maxGrids = -1;
 
        for (char owner : new char[]{'R', 'G', 'B'}) {
            int zones = zoneCounts.getOrDefault(owner, 0);
            int grids = gridCounts.getOrDefault(owner, 0);
 
            if (zones > maxZones) {
                maxZones = zones;
                maxGrids = grids;
                winner = owner;
            } else if (zones == maxZones) {
                if (grids > maxGrids) {
                    maxGrids = grids;
                    winner = owner;
                } else if (grids == maxGrids && winner == ' '){
                    winner = owner; //First encountered
                }
            }
        }
 
        System.out.println(winner + " " + maxZones);
        scanner.close();
    }
}


Problem:04  Rental robot vacuum cleaner fee collection

// Full working code is here........................
import java.time.LocalTime;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input start and end times
        LocalTime startTime = LocalTime.parse(sc.next());
        LocalTime endTime = LocalTime.parse(sc.next());
        sc.close();

        // Calculate the duration in minutes
        int duration = calculateDurationInMinutes(startTime, endTime);
				int totalCost = calculateCost(duration);
        // Output the result
        // System.out.println(duration);
				System.out.println(totalCost);
    }

    private static int calculateDurationInMinutes(LocalTime startTime, LocalTime endTime) {
        int startMinutes = startTime.getHour() * 60 + startTime.getMinute();
        int endMinutes = endTime.getHour() * 60 + endTime.getMinute();

        // If end time is before start time, add 24 hours to end time
        if (endMinutes < startMinutes) {
            endMinutes += 24 * 60;
        }

        return endMinutes - startMinutes;
    }
	
		private static int calculateCost(int duration){
			int cost = 0;
			if(duration <= 30){
				return 500;
			}else{
				int tempDuration = duration - 30;
				int tempCost = (tempDuration / 10) * 300;
				int remainMins = tempDuration % 10;
				if(remainMins != 0){
					tempCost = tempCost + 300;
				}
				cost = tempCost + 500;
			}
			
			if(cost >= 30000){
				cost = 30000;
			}
			
			return cost;
		}
}


//partially working code..

import java.util.Scanner;
 
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
 
        // Input the start time and end time in HH:MM format
        String startTime = scanner.nextLine();
        String endTime = scanner.nextLine();
 
        // Calculate the total usage time in minutes
        int usageTime = calculateUsageTime(startTime, endTime);
 
        // Calculate the usage fee
        int fee = calculateFee(usageTime);
 
        // Output the fee
        System.out.println(fee);
 
        scanner.close();
    }
 
    private static int calculateUsageTime(String startTime, String endTime) {
        // Parse start time
        String[] startParts = startTime.split(":");
        int startHour = Integer.parseInt(startParts[0]);
        int startMinute = Integer.parseInt(startParts[1]);
 
        // Parse end time
        String[] endParts = endTime.split(":");
        int endHour = Integer.parseInt(endParts[0]);
        int endMinute = Integer.parseInt(endParts[1]);
 
        // Convert times to total minutes from midnight
        int startTotalMinutes = startHour * 60 + startMinute;
        int endTotalMinutes = endHour * 60 + endMinute;
 
        // Handle cases where the end time is earlier than the start time (spans midnight)
        if (endTotalMinutes < startTotalMinutes) {
            endTotalMinutes += 24 * 60; // Add 24 hours to the end time
        }
 
        // Return the total usage time in minutes
        return endTotalMinutes - startTotalMinutes;
    }
 
    private static int calculateFee(int usageTime) {
        // Minimum fee for usage <= 30 minutes
        if (usageTime <= 30) {
            return 500;
        }
 
        // Additional fee for every 10 minutes beyond 30
        int additionalMinutes = usageTime - 30;
        int additionalUnits = (int) Math.ceil(additionalMinutes / 10.0);
        int totalFee = 500 + additionalUnits * 300;
 
        // Maximum fee cap
        return Math.min(totalFee, 30000);
    }
}


Problem 03: Setting the exploration route

import java.util.*;
 
public class Main {
    static class Point {
        int x, y;
 
        Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
 
    static int rows, cols;
    static char[][] grid;
    static Point start;
    static List<Point> pointsToVisit = new ArrayList<>();
    static int[][] distances; // Distance matrix for TSP
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
 
        // Input dimensions
        rows = scanner.nextInt();
        cols = scanner.nextInt();
        scanner.nextLine(); // Consume the newline
 
        // Input grid
        grid = new char[rows][cols];
        for (int i = 0; i < rows; i++) {
            grid[i] = scanner.nextLine().toCharArray();
        }
 
        // Parse grid to find 'S' and exploration points
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 'S') {
                    start = new Point(i, j);
                } else if (Character.isDigit(grid[i][j])) {
                    pointsToVisit.add(new Point(i, j));
                }
            }
        }
 
        // Add starting point to the list of points to visit
        pointsToVisit.add(0, start);
 
        // Calculate distances between all points
        int n = pointsToVisit.size();
        distances = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    distances[i][j] = bfs(pointsToVisit.get(i), pointsToVisit.get(j));
                }
            }
        }
 
        // Solve TSP to find the shortest path
        int result = tsp(1, 0, new Integer[1 << n][n]);
        System.out.println(result);
    }
 
    // BFS to calculate shortest path between two points
    private static int bfs(Point start, Point end) {
        Queue<Point> queue = new LinkedList<>();
        boolean[][] visited = new boolean[rows][cols];
        queue.add(start);
        visited[start.x][start.y] = true;
 
        int distance = 0;
        int[] dx = {-1, 1, 0, 0};
        int[] dy = {0, 0, -1, 1};
 
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Point current = queue.poll();
                if (current.x == end.x && current.y == end.y) {
                    return distance;
                }
                for (int d = 0; d < 4; d++) {
                    int nx = current.x + dx[d];
                    int ny = current.y + dy[d];
                    if (isValid(nx, ny) && !visited[nx][ny]) {
                        visited[nx][ny] = true;
                        queue.add(new Point(nx, ny));
                    }
                }
            }
            distance++;
        }
        return Integer.MAX_VALUE; // No path found
    }
 
    // Check if a position is valid for the robot
    private static boolean isValid(int x, int y) {
        return x >= 0 && x < rows && y >= 0 && y < cols && grid[x][y] != '*';
    }
 
    // TSP using DP with bitmasking
    private static int tsp(int visited, int current, Integer[][] dp) {
        if (visited == (1 << pointsToVisit.size()) - 1) {
            return distances[current][0]; // Return to starting point
        }
        if (dp[visited][current] != null) {
            return dp[visited][current];
        }
 
        int minCost = Integer.MAX_VALUE;
        for (int next = 0; next < pointsToVisit.size(); next++) {
            if ((visited & (1 << next)) == 0) {
                int newVisited = visited | (1 << next);
                int cost = distances[current][next] + tsp(newVisited, next, dp);
                minCost = Math.min(minCost, cost);
            }
        }
        return dp[visited][current] = minCost;
    }
}


Problem 02: Balancing

import java.util.*;
public class Main{
    public static void main(String [] args){
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int arr[][] = new int[N][N];
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                arr[i][j] = sc.nextInt();
            }
        }
         
        List<Integer> rowSum = new ArrayList<Integer>();
        List<Integer> colSum = new ArrayList<Integer>();
        for(int i = 0; i < N; i++){
            int rsum = 0;
            int csum = 0;
            for(int j = 0; j < N; j++){
                rsum += arr[i][j];
                csum += arr[j][i];
            }
            rowSum.add(rsum);
            colSum.add(csum);
        }
         
        int t1 = Collections.max(rowSum);
        int t2 = Collections.max(colSum);
         
        int target = Math.max(t1, t2);
        int minProduct = 0;
         
        for(int i = 0; i < rowSum.size(); i++){
            int temp = target - rowSum.get(i);
            minProduct += temp;
        }
         
        System.out.print(minProduct);
    }
}


Problem 01: Product display

// More optimized
int CalLargestBlock(int id_ignore){
    int maxCount = 0; // Track the longest sequence length
    int currentCount = 0; // Track the current sequence length
    int prevNum = Integer.MIN_VALUE; // Previous number in the sequence

    for(int num : ID){
	if(num == id_ignore){
		continue;
	}else if(num == prevNum){
	 	currentCount++;
	}else{
		prevNum = num;
		currentCount = 1;
	}
		maxCount = Math.max(maxCount,currentCount);
	}
		return maxCount;
}

// My answer
int CalLargestBlock(int id_ignore){
		ArrayList<Integer> arr = new ArrayList<>();
		for(int num : ID){
			if(num != id_ignore){
				arr.add(num);
			}
		}
		int maxCount = 0;
		int currentCount = 1;
		for(int i = 1; i < arr.size(); i++){
			if(arr.get(i-1).equals(arr.get(i))){
				currentCount++;
			}else{
				maxCount = Math.max(maxCount, currentCount);
				currentCount = 1;
			}
		}
		return maxCount;
	}

int CalLargestBlock(int id_ignore) {
    int size = 0, curr = 0, prev = 0, i = 0;
 
    // Skip elements equal to id_ignore
    while (i < N) {
        if (ID[i] == id_ignore) {
            i++;
        } else {
            break;
        }
    }
 
    // If all elements are id_ignore, return 0
    if (i == N) return 0;
 
    curr = 1;
    prev = ID[i];
 
    for (int j = i + 1; j < N; j++) {
        if (ID[j] == id_ignore) {
            continue;
        } else if (prev == ID[j]) {
            curr++;
        } else {
            size = Math.max(size, curr);
            prev = ID[j];
            curr = 1;
        }
    }
 
    size = Math.max(size, curr); // Update size for the last sequence
    return size;
}
